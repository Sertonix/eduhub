###############################################################################
# Create Google Cloud Run service for Hasura
#####

# Change to terraform module
# Check version of the image (fix to major version 2.2)
# Replica of the database for production (if clause for staging?)
# lift micro instance for production (terraform cloud)


# Create a secret for the access to the Google Cloud functions in the Google secret manager 
resource "google_secret_manager_secret" "cloud_function_secret" {
  provider  = google-beta
  secret_id = "cloud_function_secret"
  replication {
    automatic = true
  }
}

# Create a secret for the password of the Hasura console in the Google secret manager 
resource "google_secret_manager_secret" "secret_hasura_graphql_admin" {
  provider  = google-beta
  secret_id = "hasura_graphql_admin"
  replication {
    automatic = true
  }
}
# Create a new version for the password to the Hasura GraphQL admin setting it to the password
# given in the corresonding Terraform variable
resource "google_secret_manager_secret_version" "secret_hasura_graphql_admin_version_data" {
  provider    = google-beta
  secret      = google_secret_manager_secret.secret_hasura_graphql_admin.name
  secret_data = var.hasura_graphql_admin
}


# Apply IAM policy (see 'main.tf') which grants any user the privilige to invoke the Cloud Rund service for keycloak
resource "google_cloud_run_service_iam_policy" "hasura_service_policy_noauth" {
  location = google_cloud_run_service.hasura_service.location
  project  = google_cloud_run_service.hasura_service.project
  service  = google_cloud_run_service.hasura_service.name

  policy_data = data.google_iam_policy.noauth_invoker.policy_data
}

# Define the Google Cloud Run service for Hasura
resource "google_cloud_run_service" "hasura_service" {
  provider = google-beta
  name     = "hasura"
  location = var.region

  template {
    spec {
      containers {
        image = var.docker_image_hasura
        env {
          name  = "HASURA_GRAPHQL_ENABLE_CONSOLE"
          value = var.hasura_graphql_enable_console
        }
        env {
          name  = "HASURA_GRAPHQL_DEV_MODE"
          value = var.hasura_graphql_dev_mode
        }
        env {
          name  = "HASURA_GRAPHQL_ENABLED_LOG_TYPES"
          value = "startup, http-log, webhook-log, websocket-log, query-log"
        }
        env {
          name  = "HASURA_GRAPHQL_UNAUTHORIZED_ROLE"
          value = "anonymous"
        }
        env {
          name  = "HASURA_GRAPHQL_EXPERIMENTAL_FEATURES"
          value = "inherited_roles"
        }
        env {
          name  = "HASURA_BUCKET"
          value = var.storage_bucket_name
        }
        env {
          name  = "CLOUD_FUNCTION_LINK"
          value = var.hasura_cloud_function_link
        }
        env {
          name  = "HASURA_GRAPHQL_JWT_SECRET"
          value = "{ \"type\": \"RS256\", \"jwk_url\": \"https://${local.keycloak_service_name}-dot-${google_app_engine_application.keycloak-app.default_hostname}/auth/realms/edu-hub/protocol/openid-connect/certs\" }"
        }
        env {
          name = "HASURA_GRAPHQL_ADMIN_SECRET"
          value_from {
            secret_key_ref {
              name = google_secret_manager_secret.hasura_graphql_admin_secret.secret_id
              key  = "latest"
            }
          }
        }
        env {
          name = "HASURA_GRAPHQL_DATABASE_URL"
          value_from {
            secret_key_ref {
              name = google_secret_manager_secret.secret_hasura_db_url.secret_id
              key  = "latest"
            }
          }
        }
        env {
          name = "HASURA_CLOUD_FUNCTION_SECRET"
          value_from {
            secret_key_ref {
              name = google_secret_manager_secret.cloud_function_secret.secret_id
              key  = "latest"
            }
          }
        }
      }
    }

    metadata {
      annotations = {
        "autoscaling.knative.dev/minScale"        = "0"
        "autoscaling.knative.dev/maxScale"        = "1"
        "run.googleapis.com/vpc-access-connector" = "vpc-lan-con"
        "run.googleapis.com/vpc-access-egress"    = "private-ranges-only"
        "run.googleapis.com/cloudsql-instances"   = google_sql_database_instance.eduhub_dbi_instance.connection_name
      }
    }
  }

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
    }
  }

  lifecycle {
    ignore_changes = [
      metadata[0].annotations,
    ]
  }

  autogenerate_revision_name = true
  depends_on                 = [google_secret_manager_secret_version.secret_hasura_db_url_version_data, google_secret_manager_secret_version.secret_hasura_graphql_admin_version_data, google_vpc_access_connector.default]
}

