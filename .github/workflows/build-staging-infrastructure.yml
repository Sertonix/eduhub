name: Build Keycloak Docker Image for the Staging Environment
on:   
  push:
    # Run only on changes in the following branches
    branches:
      - staging
      - feature/integration-of-terraform-and-github

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  PROJECT_ID: eduhub-staging-new
  TF_WORKSPACE: eduhub-application-staging

jobs:

  build-keycloak:
    name: Build Docker Image for Keycloak and save to the Google Docker repo
    uses: ./.github/workflows/build-docker-image.yml
    with:
      # Folder with the Dockerfile that is used for creating the image
      DOCKERFILE_FOLDER: keycloak
      # Name for the docker image
      IMAGE_NAME: keycloak
      # Name of the branch that triggered the workflow run
      BRANCH: ${{ github.ref_name }}
      # ID of the project in Google in which the image will be stored and deployed
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DOCKER_REPO_STAGING }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-backend:
    name: Build Docker Image for Backend and save to the Google Docker repo
    uses: ./.github/workflows/build-docker-image.yml
    with:
      # Folder with the Dockerfile that is used for creating the image
      DOCKERFILE_FOLDER: backend
      # Name for the docker image
      IMAGE_NAME: backend
      # Name of the branch that triggered the workflow run
      BRANCH: ${{ github.ref_name }}
      # ID of the project in Google in which the image will be stored and deployed
      PROJECT_ID: eduhub-staging-new
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DOCKER_REPO_STAGING }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-frontend:
    name: Build Docker Image for Frontend and save to the Google Docker repo
    uses: ./.github/workflows/build-docker-image.yml
    with:
      # Folder with the Dockerfile that is used for creating the image
      DOCKERFILE_FOLDER: frontend
      # Name for the docker image
      IMAGE_NAME: frontend
      # Name of the branch that triggered the workflow run
      BRANCH: ${{ github.ref_name }}
      # ID of the project in Google in which the image will be stored and deployed
      PROJECT_ID: eduhub-staging-new
      NEXT_PUBLIC_API_URL: 'https://hasura-staging.opencampus.sh/v1/graphql'
      NEXT_PUBLIC_AUTH_URL: 'https://keycloak-staging.opencampus.sh'
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_DOCKER_REPO_STAGING }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  deploy-application:
    name: "Deploy application infrastructure with Docker images of above"
    needs: [build-keycloak, build-backend, build-frontend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/application
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.3
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -detailed-exitcode -no-color -input=false
        continue-on-error: true

      # - uses: actions/github-script@v6
      #   #if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Check for Plan Failure
      #   if: steps.plan.outputs.exitcode == 1
      #   run: exit 1

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        #if: github.event_name == 'push' && steps.plan.outputs.exitcode == 2
        run: terraform apply -auto-approve -input=false

