name: Setup Production Environment
on:   
  push:
    # Run only on changes in the following branches
    branches:
      - production

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  pull_request:
    # Run tests for PRs.
    branches:
      - production

env:
  TF_WORKSPACE: eduhub-application-production

jobs:

  build-keycloak:
    if: github.event_name == 'pull_request'
    name: Build and Store Keycloak Docker Image in Google Docker Repo
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: keycloak
      IMAGE_NAME: keycloak
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-production
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_PRODUCTION_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-backend:
    if: github.event_name == 'pull_request'
    name: Build and Store Backend Docker Image in Google Docker Repo
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: backend
      IMAGE_NAME: backend
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-production
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_PRODUCTION_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-frontend:
    if: github.event_name == 'pull_request'
    name: Build and Store Frontend Docker Image in Google Docker Repo
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: frontend
      IMAGE_NAME: frontend
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-production
      NEXT_PUBLIC_API_URL: 'https://hasura.opencampus.sh/v1/graphql'
      NEXT_PUBLIC_AUTH_URL: 'https://keycloak.opencampus.sh'
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_PRODUCTION_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  build-rent-a-scientist-frontend:
    if: github.event_name == 'pull_request'
    name: Build and Store Rent-a-Scientist Docker Image in Google Docker Repo
    uses: ./.github/workflows/build-and-store-docker-image.yml
    with:
      DOCKERFILE_FOLDER: rent-a-scientist
      IMAGE_NAME: rent-a-scientist
      BRANCH: ${{ github.ref_name }}
      PROJECT_ID: eduhub-production
      NEXT_PUBLIC_API_URL: 'https://hasura.opencampus.sh/v1/graphql'
      NEXT_PUBLIC_AUTH_URL: 'https://keycloak.opencampus.sh'
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_PRODUCTION_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}

  zip-and-store-cloud-functions:
    if: github.event_name == 'pull_request'
    name: Zip and Store Cloud Functions
    uses: ./.github/workflows/zip-and-store-cloud-functions.yml
    with:
      PROJECT_ID: eduhub-production
      CLOUD_FUNCTION_FOLDER: functions
      BUCKET_NAME: eduhub-production
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_EDUHUB_PRODUCTION_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}


  deploy-application:
    name: "Deploy Application Infrastructure"
    needs: [build-keycloak, build-backend, build-frontend, build-rent-a-scientist-frontend, zip-and-store-cloud-functions]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/application
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.3
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -detailed-exitcode -no-color -input=false
        continue-on-error: true

      - name: Check for Plan Failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/production' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

